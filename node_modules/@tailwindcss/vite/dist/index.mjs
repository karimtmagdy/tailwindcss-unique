import{IO as b,Parsing as C,scanFiles as P}from"@tailwindcss/oxide";import{Features as h,transform as x}from"lightningcss";import M from"path";import{compile as R}from"tailwindcss";function k(){let i=null,s=new Set,l={},u=!1,d=!1,f=[];function c(e){if(!i)return;let t=[];for(let n of Object.keys(l)){let r=i.moduleGraph.getModuleById(n);if(!r){e||delete l[n];continue}i.moduleGraph.invalidateModule(r),t.push({type:`${r.type}-update`,path:r.url,acceptedPath:r.url,timestamp:Date.now()})}t.length>0&&i.hot.send({type:"update",updates:t})}function m(e,t){let n=!1;for(let r of P([{content:e,extension:t}],b.Sequential|C.Sequential)){if(!n){if(s.has(r))continue;n=!0}s.add(r)}return n}function p(e){return R(e).build(Array.from(s))}function w(e){return F(p(e),{minify:d})}async function g(e,t,n){let r={...e,getCombinedSourcemap:()=>{throw new Error("getCombinedSourcemap not implemented")}};for(let a of f){if(!a.transform)continue;let S="handler"in a.transform?a.transform.handler:a.transform;try{let o=await S.call(r,n,t);if(!o)continue;typeof o=="string"?n=o:o.code&&(n=o.code)}catch{console.error(`Error running ${a.name} on Tailwind CSS output. Skipping.`)}}return n}return[{name:"@tailwindcss/vite:scan",enforce:"pre",configureServer(e){i=e},async configResolved(e){d=e.build.cssMinify!==!1,u=e.build.ssr!==!1&&e.build.ssr!==void 0;let t=["vite:css",...e.command==="build"?["vite:css-post"]:[]];f=e.plugins.filter(n=>t.includes(n.name))},transformIndexHtml(e){m(e,"html")&&c(u)},transform(e,t,n){if(t.includes("/.vite/"))return;let r=v(t);r===""||r==="css"||(m(e,r),c(n?.ssr??!1))}},{name:"@tailwindcss/vite:generate:serve",apply:"serve",async transform(e,t,n){return y(t,e)?(l[t]={content:"",handled:!0},n?.ssr||await i?.waitForRequestsIdle?.(t),{code:await g(this,t,p(e))}):void 0}},{name:"@tailwindcss/vite:generate:build",apply:"build",transform(e,t){y(t,e)&&(l[t]={content:e,handled:!1})},async renderChunk(e,t){for(let[n,r]of Object.entries(l)){if(r.handled)continue;let a=w(r.content);await g(this,n,a),r.handled=!0}}}]}function v(i){let[s]=i.split("?",2);return M.extname(s).slice(1)}function y(i,s){if(!i.includes("/.vite/"))return v(i)==="css"&&s.includes("@tailwind")}function F(i,{file:s="input.css",minify:l=!1}={}){return x({filename:s,code:Buffer.from(i),minify:l,sourceMap:!1,drafts:{customMedia:!0},nonStandard:{deepSelectorCombinator:!0},include:h.Nesting,exclude:h.LogicalProperties,targets:{safari:16<<16|1024},errorRecovery:!0}).code.toString()}export{k as default};
